@page "/nextprevfetchdata"

@using System.Net
@using Microsoft.Extensions.Logging
@using PaginationTest.Shared.Models

@inject HttpClient Http

<h1>Next and Previous Button Pagination Example</h1>

<p>This component demonstrates fetching paginated data from the server.</p>

@if (_students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            @if (currentPageNumber > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="#" 
                       @onclick="@(() => LoadDataAsync(continuationTokens[1], _pageSize, 1))"
                       @onclick:preventDefault="true"
                       @onclick:stopPropagation="true">First</a>
                </li>
            }

            @if (currentPageNumber > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="#" 
                       @onclick="@(() => LoadDataAsync(continuationTokens[currentPageNumber - 1], _pageSize, currentPageNumber - 1))"
                       @onclick:preventDefault="true"
                       @onclick:stopPropagation="true">Previous</a>
                </li>
            }

            @if (_students.Pager.HasNextPage)
            {
                <li class="page-item">
                    <a class="page-link" href="#" 
                       @onclick="@(() => LoadDataAsync(_students.Pager.ContinuationToken, _pageSize, currentPageNumber + 1))"
                       @onclick:preventDefault="true"
                       @onclick:stopPropagation="true">Next</a>
                </li>
            }
        </ul>
    </nav>

    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in _students.Items)
            {
                <tr>
                    <td>@student.FirstName</td>
                    <td>@student.LastName</td>
                </tr>
            }
        </tbody>
    </table>

}

@code {

    NextPrevPagedData<Student> _students;
    int currentPageNumber = 1;
    int _pageSize = 10;
    IDictionary<int, string> continuationTokens = new Dictionary<int, string>();

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync(String.Empty, _pageSize);
    }

    protected async Task LoadDataAsync(string continuationToken, int pageSize, int pageNum = 1)
    {
        var appSettings = new AppSettings();

        if (continuationTokens.ContainsKey(pageNum))
        {
            var url = $"{appSettings.BackedApi.Hostname}/api/students/nextprev?continuationToken={WebUtility.UrlEncode(continuationTokens[pageNum])}&pageSize={pageSize}";

            _students = await Http.GetFromJsonAsync<NextPrevPagedData<Student>>(url);
            _pageSize = pageSize;
            currentPageNumber = pageNum;

            return;
        }

        currentPageNumber = pageNum;

        var url2 = $"{appSettings.BackedApi.Hostname}/api/students/nextprev?continuationToken={WebUtility.UrlEncode(continuationToken)}&pageSize={pageSize}";

        _students = await Http.GetFromJsonAsync<NextPrevPagedData<Student>>(url2);
        _pageSize = pageSize;

        continuationTokens[currentPageNumber] = continuationToken;
        continuationTokens[currentPageNumber + 1] = _students.Pager.ContinuationToken;
    }
}
